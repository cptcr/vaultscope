using System.Text.Json;
using VaultScope.Core.Models;

namespace VaultScope.Infrastructure.Data.Entities;

public class VulnerabilityEntity : BaseEntity
{
    public string Type { get; set; } = string.Empty;
    public VulnerabilitySeverity Severity { get; set; }
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string AffectedEndpoint { get; set; } = string.Empty;
    public string HttpMethod { get; set; } = string.Empty;
    public string? PayloadUsed { get; set; }
    public string? Evidence { get; set; }
    public string? Remediation { get; set; }
    public string? CweId { get; set; }
    public string? OwaspCategory { get; set; }
    public DateTime DiscoveredAt { get; set; }
    public double ConfidenceScore { get; set; }
    public string? MetadataJson { get; set; }
    
    // Foreign key
    public Guid ScanResultId { get; set; }
    public ScanResultEntity ScanResult { get; set; } = null!;
    
    public Dictionary<string, object> Metadata
    {
        get => string.IsNullOrEmpty(MetadataJson) 
            ? new Dictionary<string, object>()
            : JsonSerializer.Deserialize<Dictionary<string, object>>(MetadataJson) ?? new Dictionary<string, object>();
        set => MetadataJson = JsonSerializer.Serialize(value);
    }
    
    public static VulnerabilityEntity FromDomainModel(Vulnerability model, Guid scanResultId)
    {
        return new VulnerabilityEntity
        {
            Id = model.Id,
            Type = model.Type,
            Severity = model.Severity,
            Title = model.Title,
            Description = model.Description,
            AffectedEndpoint = model.AffectedEndpoint,
            HttpMethod = model.HttpMethod,
            PayloadUsed = model.PayloadUsed,
            Evidence = model.Evidence,
            Remediation = model.Remediation,
            CweId = model.CweId,
            OwaspCategory = model.OwaspCategory,
            DiscoveredAt = model.DiscoveredAt,
            ConfidenceScore = model.ConfidenceScore,
            MetadataJson = JsonSerializer.Serialize(model.Metadata),
            ScanResultId = scanResultId
        };
    }
    
    public Vulnerability ToDomainModel()
    {
        return new Vulnerability
        {
            Id = Id,
            Type = Type,
            Severity = Severity,
            Title = Title,
            Description = Description,
            AffectedEndpoint = AffectedEndpoint,
            HttpMethod = HttpMethod,
            PayloadUsed = PayloadUsed,
            Evidence = Evidence,
            Remediation = Remediation,
            CweId = CweId,
            OwaspCategory = OwaspCategory,
            DiscoveredAt = DiscoveredAt,
            ConfidenceScore = ConfidenceScore,
            Metadata = Metadata
        };
    }
}