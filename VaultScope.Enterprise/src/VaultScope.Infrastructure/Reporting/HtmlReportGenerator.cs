using System.IO;
using System.Text;
using System.Threading.Tasks;
using VaultScope.Core.Interfaces;
using VaultScope.Core.Models;

namespace VaultScope.Infrastructure.Reporting;

public class HtmlReportGenerator : IReportGenerator
{
    public ReportFormat Format => ReportFormat.Html;
    
    public Task<byte[]> GenerateAsync(ScanResult scanResult, ReportOptions options)
    {
        var html = GenerateHtml(scanResult, options);
        return Task.FromResult(Encoding.UTF8.GetBytes(html));
    }
    
    public async Task SaveToFileAsync(ScanResult scanResult, string filePath, ReportOptions options)
    {
        var html = GenerateHtml(scanResult, options);
        await File.WriteAllTextAsync(filePath, html);
    }
    
    private string GenerateHtml(ScanResult scanResult, ReportOptions options)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine("<!DOCTYPE html>");
        sb.AppendLine("<html lang=\"en\">");
        sb.AppendLine("<head>");
        sb.AppendLine("    <meta charset=\"UTF-8\">");
        sb.AppendLine("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
        sb.AppendLine($"    <title>{options.Title}</title>");
        sb.AppendLine(GetStyles());
        sb.AppendLine("</head>");
        sb.AppendLine("<body>");
        
        // Header
        sb.AppendLine("    <header>");
        sb.AppendLine($"        <h1>{options.Title}</h1>");
        sb.AppendLine("        <div class=\"header-info\">");
        sb.AppendLine($"            <span>Generated: {DateTime.Now:yyyy-MM-dd HH:mm:ss}</span>");
        if (!string.IsNullOrEmpty(options.CompanyName))
        {
            sb.AppendLine($"            <span>Company: {options.CompanyName}</span>");
        }
        sb.AppendLine("        </div>");
        sb.AppendLine("    </header>");
        
        sb.AppendLine("    <div class=\"container\">");
        
        // Executive Summary
        if (options.IncludeExecutiveSummary)
        {
            sb.AppendLine(GenerateExecutiveSummary(scanResult));
        }
        
        // Security Score
        if (options.IncludeSecurityScore)
        {
            sb.AppendLine(GenerateSecurityScore(scanResult));
        }
        
        // Charts
        if (options.IncludeCharts)
        {
            sb.AppendLine(GenerateCharts(scanResult));
        }
        
        // Detailed Findings
        if (options.IncludeDetailedFindings)
        {
            sb.AppendLine(GenerateDetailedFindings(scanResult));
        }
        
        // Timeline
        if (options.IncludeTimeline)
        {
            sb.AppendLine(GenerateTimeline(scanResult));
        }
        
        // Remediation
        if (options.IncludeRemediation)
        {
            sb.AppendLine(GenerateRemediation(scanResult));
        }
        
        sb.AppendLine("    </div>");
        
        // Footer
        sb.AppendLine("    <footer>");
        sb.AppendLine("        <p>Generated by VaultScope Enterprise &copy; 2024</p>");
        sb.AppendLine("    </footer>");
        
        sb.AppendLine(GetScripts());
        sb.AppendLine("</body>");
        sb.AppendLine("</html>");
        
        return sb.ToString();
    }
    
    private string GenerateExecutiveSummary(ScanResult scanResult)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine("        <section class=\"executive-summary\">");
        sb.AppendLine("            <h2>Executive Summary</h2>");
        sb.AppendLine("            <div class=\"summary-grid\">");
        
        // Overview Card
        sb.AppendLine("                <div class=\"summary-card\">");
        sb.AppendLine("                    <h3>Scan Overview</h3>");
        sb.AppendLine($"                    <p><strong>Target:</strong> {scanResult.TargetUrl}</p>");
        sb.AppendLine($"                    <p><strong>Duration:</strong> {scanResult.Duration.TotalMinutes:F1} minutes</p>");
        sb.AppendLine($"                    <p><strong>Endpoints Tested:</strong> {scanResult.TestedEndpoints.Count}</p>");
        sb.AppendLine($"                    <p><strong>Total Requests:</strong> {scanResult.TotalRequestsMade}</p>");
        sb.AppendLine("                </div>");
        
        // Findings Card
        sb.AppendLine("                <div class=\"summary-card\">");
        sb.AppendLine("                    <h3>Vulnerability Summary</h3>");
        sb.AppendLine($"                    <p><strong>Total Found:</strong> {scanResult.Vulnerabilities.Count}</p>");
        foreach (var severity in Enum.GetValues<VulnerabilitySeverity>().OrderByDescending(s => s))
        {
            var count = scanResult.Vulnerabilities.Count(v => v.Severity == severity);
            if (count > 0)
            {
                sb.AppendLine($"                    <p class=\"severity-{severity.ToString().ToLower()}\"><strong>{severity}:</strong> {count}</p>");
            }
        }
        sb.AppendLine("                </div>");
        
        // Risk Assessment Card
        sb.AppendLine("                <div class=\"summary-card\">");
        sb.AppendLine("                    <h3>Risk Assessment</h3>");
        var riskLevel = DetermineRiskLevel(scanResult);
        sb.AppendLine($"                    <div class=\"risk-level risk-{riskLevel.ToLower()}\">{riskLevel}</div>");
        sb.AppendLine("                    <p>Immediate action required for critical findings</p>");
        sb.AppendLine("                </div>");
        
        sb.AppendLine("            </div>");
        sb.AppendLine("        </section>");
        
        return sb.ToString();
    }
    
    private string GenerateSecurityScore(ScanResult scanResult)
    {
        var sb = new StringBuilder();
        var score = scanResult.SecurityScore;
        
        sb.AppendLine("        <section class=\"security-score\">");
        sb.AppendLine("            <h2>Security Score</h2>");
        sb.AppendLine("            <div class=\"score-container\">");
        
        // Overall Score
        sb.AppendLine("                <div class=\"overall-score\">");
        sb.AppendLine($"                    <div class=\"score-circle\" data-score=\"{score.OverallScore}\">");
        sb.AppendLine($"                        <span class=\"score-value\">{score.OverallScore:F0}</span>");
        sb.AppendLine($"                        <span class=\"score-grade\">{score.Grade}</span>");
        sb.AppendLine("                    </div>");
        sb.AppendLine("                </div>");
        
        // Category Scores
        sb.AppendLine("                <div class=\"category-scores\">");
        foreach (var category in score.CategoryScores.Values)
        {
            sb.AppendLine("                    <div class=\"category-score\">");
            sb.AppendLine($"                        <h4>{category.Category}</h4>");
            sb.AppendLine($"                        <div class=\"progress-bar\">");
            sb.AppendLine($"                            <div class=\"progress-fill\" style=\"width: {category.Score}%\"></div>");
            sb.AppendLine("                        </div>");
            sb.AppendLine($"                        <span class=\"score-text\">{category.Score:F0}% ({category.TestsPassed}/{category.TotalTests} passed)</span>");
            sb.AppendLine("                    </div>");
        }
        sb.AppendLine("                </div>");
        
        // Strengths and Weaknesses
        sb.AppendLine("                <div class=\"strengths-weaknesses\">");
        if (score.Strengths.Any())
        {
            sb.AppendLine("                    <div class=\"strengths\">");
            sb.AppendLine("                        <h4>Strengths</h4>");
            sb.AppendLine("                        <ul>");
            foreach (var strength in score.Strengths)
            {
                sb.AppendLine($"                            <li>{strength}</li>");
            }
            sb.AppendLine("                        </ul>");
            sb.AppendLine("                    </div>");
        }
        
        if (score.Weaknesses.Any())
        {
            sb.AppendLine("                    <div class=\"weaknesses\">");
            sb.AppendLine("                        <h4>Weaknesses</h4>");
            sb.AppendLine("                        <ul>");
            foreach (var weakness in score.Weaknesses)
            {
                sb.AppendLine($"                            <li>{weakness}</li>");
            }
            sb.AppendLine("                        </ul>");
            sb.AppendLine("                    </div>");
        }
        sb.AppendLine("                </div>");
        
        sb.AppendLine("            </div>");
        sb.AppendLine("        </section>");
        
        return sb.ToString();
    }
    
    private string GenerateCharts(ScanResult scanResult)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine("        <section class=\"charts\">");
        sb.AppendLine("            <h2>Vulnerability Analysis</h2>");
        sb.AppendLine("            <div class=\"charts-grid\">");
        
        // Severity Distribution Chart
        sb.AppendLine("                <div class=\"chart-container\">");
        sb.AppendLine("                    <h3>Severity Distribution</h3>");
        sb.AppendLine("                    <canvas id=\"severityChart\"></canvas>");
        sb.AppendLine("                </div>");
        
        // Type Distribution Chart
        sb.AppendLine("                <div class=\"chart-container\">");
        sb.AppendLine("                    <h3>Vulnerability Types</h3>");
        sb.AppendLine("                    <canvas id=\"typeChart\"></canvas>");
        sb.AppendLine("                </div>");
        
        sb.AppendLine("            </div>");
        sb.AppendLine("        </section>");
        
        return sb.ToString();
    }
    
    private string GenerateDetailedFindings(ScanResult scanResult)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine("        <section class=\"detailed-findings\">");
        sb.AppendLine("            <h2>Detailed Findings</h2>");
        
        var groupedVulns = scanResult.Vulnerabilities
            .GroupBy(v => v.Severity)
            .OrderByDescending(g => g.Key);
        
        foreach (var group in groupedVulns)
        {
            sb.AppendLine($"            <div class=\"severity-group severity-{group.Key.ToString().ToLower()}\">");
            sb.AppendLine($"                <h3>{group.Key} Severity ({group.Count()})</h3>");
            
            foreach (var vuln in group)
            {
                sb.AppendLine("                <div class=\"vulnerability-card\">");
                sb.AppendLine($"                    <div class=\"vuln-header\">");
                sb.AppendLine($"                        <h4>{vuln.Title}</h4>");
                sb.AppendLine($"                        <span class=\"vuln-type\">{vuln.Type}</span>");
                sb.AppendLine("                    </div>");
                
                sb.AppendLine("                    <div class=\"vuln-details\">");
                sb.AppendLine($"                        <p><strong>Endpoint:</strong> {vuln.AffectedEndpoint}</p>");
                sb.AppendLine($"                        <p><strong>Method:</strong> {vuln.HttpMethod}</p>");
                sb.AppendLine($"                        <p><strong>Description:</strong> {vuln.Description}</p>");
                
                if (!string.IsNullOrEmpty(vuln.Evidence))
                {
                    sb.AppendLine("                        <div class=\"evidence\">");
                    sb.AppendLine("                            <strong>Evidence:</strong>");
                    sb.AppendLine($"                            <pre>{System.Web.HttpUtility.HtmlEncode(vuln.Evidence)}</pre>");
                    sb.AppendLine("                        </div>");
                }
                
                if (!string.IsNullOrEmpty(vuln.Remediation))
                {
                    sb.AppendLine("                        <div class=\"remediation\">");
                    sb.AppendLine($"                            <strong>Remediation:</strong> {vuln.Remediation}");
                    sb.AppendLine("                        </div>");
                }
                
                sb.AppendLine("                        <div class=\"vuln-meta\">");
                sb.AppendLine($"                            <span>CWE: {vuln.CweId}</span>");
                sb.AppendLine($"                            <span>OWASP: {vuln.OwaspCategory}</span>");
                sb.AppendLine($"                            <span>Confidence: {vuln.ConfidenceScore:P0}</span>");
                sb.AppendLine("                        </div>");
                sb.AppendLine("                    </div>");
                sb.AppendLine("                </div>");
            }
            
            sb.AppendLine("            </div>");
        }
        
        sb.AppendLine("        </section>");
        
        return sb.ToString();
    }
    
    private string GenerateTimeline(ScanResult scanResult)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine("        <section class=\"timeline\">");
        sb.AppendLine("            <h2>Scan Timeline</h2>");
        sb.AppendLine("            <div class=\"timeline-container\">");
        
        sb.AppendLine($"                <div class=\"timeline-event\">");
        sb.AppendLine($"                    <span class=\"time\">{scanResult.StartTime:HH:mm:ss}</span>");
        sb.AppendLine("                    <span class=\"event\">Scan Started</span>");
        sb.AppendLine("                </div>");
        
        // Group vulnerabilities by discovery time
        var timeGroups = scanResult.Vulnerabilities
            .OrderBy(v => v.DiscoveredAt)
            .GroupBy(v => v.DiscoveredAt.ToString("HH:mm:ss"));
        
        foreach (var group in timeGroups.Take(10)) // Show first 10 events
        {
            sb.AppendLine($"                <div class=\"timeline-event\">");
            sb.AppendLine($"                    <span class=\"time\">{group.Key}</span>");
            sb.AppendLine($"                    <span class=\"event\">{group.Count()} vulnerabilities discovered</span>");
            sb.AppendLine("                </div>");
        }
        
        if (scanResult.EndTime.HasValue)
        {
            sb.AppendLine($"                <div class=\"timeline-event\">");
            sb.AppendLine($"                    <span class=\"time\">{scanResult.EndTime.Value:HH:mm:ss}</span>");
            sb.AppendLine($"                    <span class=\"event\">Scan Completed</span>");
            sb.AppendLine("                </div>");
        }
        
        sb.AppendLine("            </div>");
        sb.AppendLine("        </section>");
        
        return sb.ToString();
    }
    
    private string GenerateRemediation(ScanResult scanResult)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine("        <section class=\"remediation\">");
        sb.AppendLine("            <h2>Remediation Recommendations</h2>");
        
        // Priority recommendations
        sb.AppendLine("            <div class=\"priority-recommendations\">");
        sb.AppendLine("                <h3>Priority Actions</h3>");
        sb.AppendLine("                <ol>");
        
        if (scanResult.Vulnerabilities.Any(v => v.Severity == VulnerabilitySeverity.Critical))
        {
            sb.AppendLine("                    <li class=\"priority-critical\">Address all critical vulnerabilities immediately</li>");
        }
        
        if (scanResult.Vulnerabilities.Any(v => v.Type.Contains("Injection")))
        {
            sb.AppendLine("                    <li class=\"priority-high\">Implement comprehensive input validation</li>");
        }
        
        if (scanResult.Vulnerabilities.Any(v => v.Type.Contains("Auth")))
        {
            sb.AppendLine("                    <li class=\"priority-high\">Review and strengthen authentication mechanisms</li>");
        }
        
        sb.AppendLine("                    <li>Conduct security code review</li>");
        sb.AppendLine("                    <li>Implement security headers across all endpoints</li>");
        sb.AppendLine("                    <li>Schedule regular security assessments</li>");
        sb.AppendLine("                </ol>");
        sb.AppendLine("            </div>");
        
        // Detailed recommendations by type
        var typeGroups = scanResult.Vulnerabilities
            .GroupBy(v => v.Type)
            .OrderByDescending(g => g.Count());
        
        sb.AppendLine("            <div class=\"type-recommendations\">");
        sb.AppendLine("                <h3>Recommendations by Vulnerability Type</h3>");
        
        foreach (var group in typeGroups)
        {
            var firstVuln = group.First();
            sb.AppendLine($"                <div class=\"type-recommendation\">");
            sb.AppendLine($"                    <h4>{group.Key} ({group.Count()} instances)</h4>");
            sb.AppendLine($"                    <p>{firstVuln.Remediation}</p>");
            sb.AppendLine("                </div>");
        }
        
        sb.AppendLine("            </div>");
        sb.AppendLine("        </section>");
        
        return sb.ToString();
    }
    
    private string DetermineRiskLevel(ScanResult scanResult)
    {
        if (scanResult.Vulnerabilities.Any(v => v.Severity == VulnerabilitySeverity.Critical))
            return "CRITICAL";
        
        if (scanResult.Vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.High) >= 3)
            return "HIGH";
        
        if (scanResult.Vulnerabilities.Any(v => v.Severity == VulnerabilitySeverity.High))
            return "MEDIUM";
        
        if (scanResult.Vulnerabilities.Any())
            return "LOW";
        
        return "MINIMAL";
    }
    
    private string GetStyles()
    {
        return @"
    <style>
        :root {
            --primary-color: #8B5CF6;
            --secondary-color: #6D28D9;
            --background-color: #0F0F0F;
            --surface-color: #1A1A1A;
            --text-primary: #FFFFFF;
            --text-secondary: #A0A0A0;
            --severity-critical: #EF4444;
            --severity-high: #F97316;
            --severity-medium: #F59E0B;
            --severity-low: #3B82F6;
            --severity-informational: #6B7280;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background-color: var(--background-color);
            color: var(--text-primary);
            line-height: 1.6;
        }
        
        header {
            background-color: var(--surface-color);
            padding: 2rem;
            border-bottom: 2px solid var(--primary-color);
        }
        
        h1 {
            color: var(--primary-color);
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }
        
        .header-info {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }
        
        .header-info span {
            margin-right: 2rem;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        section {
            background-color: var(--surface-color);
            border-radius: 8px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(139, 92, 246, 0.1);
        }
        
        h2 {
            color: var(--primary-color);
            font-size: 2rem;
            margin-bottom: 1.5rem;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 0.5rem;
        }
        
        h3 {
            color: var(--text-primary);
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }
        
        h4 {
            color: var(--text-primary);
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }
        
        .summary-card {
            background-color: rgba(139, 92, 246, 0.1);
            border: 1px solid var(--primary-color);
            border-radius: 8px;
            padding: 1.5rem;
        }
        
        .summary-card h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
        }
        
        .severity-critical { color: var(--severity-critical); }
        .severity-high { color: var(--severity-high); }
        .severity-medium { color: var(--severity-medium); }
        .severity-low { color: var(--severity-low); }
        .severity-informational { color: var(--severity-informational); }
        
        .risk-level {
            font-size: 2rem;
            font-weight: bold;
            text-align: center;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        
        .risk-critical { background-color: var(--severity-critical); }
        .risk-high { background-color: var(--severity-high); }
        .risk-medium { background-color: var(--severity-medium); }
        .risk-low { background-color: var(--severity-low); }
        .risk-minimal { background-color: var(--severity-informational); }
        
        .score-container {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 2rem;
            align-items: start;
        }
        
        .overall-score {
            text-align: center;
        }
        
        .score-circle {
            width: 200px;
            height: 200px;
            border-radius: 50%;
            background: conic-gradient(var(--primary-color) calc(var(--score) * 3.6deg), var(--surface-color) 0);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
            position: relative;
        }
        
        .score-circle::before {
            content: '';
            position: absolute;
            width: 170px;
            height: 170px;
            background-color: var(--surface-color);
            border-radius: 50%;
        }
        
        .score-value {
            font-size: 3rem;
            font-weight: bold;
            color: var(--primary-color);
            z-index: 1;
        }
        
        .score-grade {
            font-size: 1.5rem;
            color: var(--text-secondary);
            z-index: 1;
        }
        
        .category-score {
            margin-bottom: 1.5rem;
        }
        
        .progress-bar {
            background-color: rgba(255, 255, 255, 0.1);
            height: 24px;
            border-radius: 12px;
            overflow: hidden;
            margin: 0.5rem 0;
        }
        
        .progress-fill {
            background: linear-gradient(90deg, var(--secondary-color), var(--primary-color));
            height: 100%;
            transition: width 0.3s ease;
        }
        
        .score-text {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }
        
        .strengths-weaknesses {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-top: 2rem;
        }
        
        .strengths, .weaknesses {
            padding: 1rem;
            border-radius: 8px;
        }
        
        .strengths {
            background-color: rgba(34, 197, 94, 0.1);
            border: 1px solid #22C55E;
        }
        
        .weaknesses {
            background-color: rgba(239, 68, 68, 0.1);
            border: 1px solid #EF4444;
        }
        
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
        }
        
        .chart-container {
            background-color: rgba(139, 92, 246, 0.05);
            border: 1px solid var(--primary-color);
            border-radius: 8px;
            padding: 1.5rem;
        }
        
        .vulnerability-card {
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            border-left: 4px solid var(--primary-color);
        }
        
        .vuln-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .vuln-type {
            background-color: var(--primary-color);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-size: 0.875rem;
        }
        
        .vuln-details p {
            margin-bottom: 0.5rem;
        }
        
        .evidence, .remediation {
            background-color: rgba(0, 0, 0, 0.3);
            padding: 1rem;
            border-radius: 4px;
            margin: 1rem 0;
        }
        
        pre {
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 0.875rem;
            line-height: 1.4;
        }
        
        .vuln-meta {
            display: flex;
            gap: 2rem;
            margin-top: 1rem;
            color: var(--text-secondary);
            font-size: 0.875rem;
        }
        
        .timeline-container {
            position: relative;
            padding-left: 3rem;
        }
        
        .timeline-container::before {
            content: '';
            position: absolute;
            left: 1rem;
            top: 0;
            bottom: 0;
            width: 2px;
            background-color: var(--primary-color);
        }
        
        .timeline-event {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
            position: relative;
        }
        
        .timeline-event::before {
            content: '';
            position: absolute;
            left: -2.5rem;
            width: 12px;
            height: 12px;
            background-color: var(--primary-color);
            border-radius: 50%;
            border: 2px solid var(--surface-color);
        }
        
        .timeline-event .time {
            color: var(--primary-color);
            font-weight: bold;
            margin-right: 1rem;
            min-width: 80px;
        }
        
        .priority-recommendations ol {
            margin-left: 2rem;
        }
        
        .priority-recommendations li {
            margin-bottom: 0.75rem;
            line-height: 1.8;
        }
        
        .priority-critical {
            color: var(--severity-critical);
            font-weight: bold;
        }
        
        .priority-high {
            color: var(--severity-high);
            font-weight: bold;
        }
        
        .type-recommendation {
            background-color: rgba(139, 92, 246, 0.05);
            border-left: 4px solid var(--primary-color);
            padding: 1rem;
            margin-bottom: 1rem;
        }
        
        footer {
            background-color: var(--surface-color);
            text-align: center;
            padding: 2rem;
            color: var(--text-secondary);
            border-top: 2px solid var(--primary-color);
        }
        
        @media print {
            body {
                background-color: white;
                color: black;
            }
            
            section {
                box-shadow: none;
                border: 1px solid #ddd;
            }
        }
    </style>";
    }
    
    private string GetScripts()
    {
        return @"
    <script src=""https://cdn.jsdelivr.net/npm/chart.js""></script>
    <script>
        // Set score circle CSS variable
        document.querySelectorAll('.score-circle').forEach(circle => {
            const score = circle.dataset.score;
            circle.style.setProperty('--score', score);
        });
        
        // Severity Chart
        const severityCtx = document.getElementById('severityChart');
        if (severityCtx) {
            new Chart(severityCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Critical', 'High', 'Medium', 'Low', 'Informational'],
                    datasets: [{
                        data: [
                            document.querySelectorAll('.severity-critical').length,
                            document.querySelectorAll('.severity-high').length,
                            document.querySelectorAll('.severity-medium').length,
                            document.querySelectorAll('.severity-low').length,
                            document.querySelectorAll('.severity-informational').length
                        ],
                        backgroundColor: [
                            '#EF4444',
                            '#F97316',
                            '#F59E0B',
                            '#3B82F6',
                            '#6B7280'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                color: '#FFFFFF'
                            }
                        }
                    }
                }
            });
        }
        
        // Type Chart
        const typeCtx = document.getElementById('typeChart');
        if (typeCtx) {
            // This would need actual data from the scan
            new Chart(typeCtx, {
                type: 'bar',
                data: {
                    labels: ['SQL Injection', 'XSS', 'Auth Bypass', 'Headers', 'Other'],
                    datasets: [{
                        label: 'Count',
                        data: [5, 3, 2, 4, 1],
                        backgroundColor: '#8B5CF6'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: '#FFFFFF'
                            }
                        },
                        x: {
                            ticks: {
                                color: '#FFFFFF'
                            }
                        }
                    }
                }
            });
        }
    </script>";
    }
}