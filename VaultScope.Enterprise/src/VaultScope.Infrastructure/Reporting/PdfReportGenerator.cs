using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using QuestPDF.Drawing;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using VaultScope.Core.Interfaces;
using VaultScope.Core.Models;

namespace VaultScope.Infrastructure.Reporting;

public class PdfReportGenerator : IReportGenerator
{
    static PdfReportGenerator()
    {
        QuestPDF.Settings.License = LicenseType.Community;
    }
    
    public ReportFormat Format => ReportFormat.Pdf;
    
    public Task<byte[]> GenerateAsync(ScanResult scanResult, ReportOptions options)
    {
        var document = CreateDocument(scanResult, options);
        var bytes = document.GeneratePdf();
        return Task.FromResult(bytes);
    }
    
    public Task SaveToFileAsync(ScanResult scanResult, string filePath, ReportOptions options)
    {
        var document = CreateDocument(scanResult, options);
        document.GeneratePdf(filePath);
        return Task.CompletedTask;
    }
    
    private Document CreateDocument(ScanResult scanResult, ReportOptions options)
    {
        return Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(2, Unit.Centimetre);
                page.PageColor(Colors.White);
                page.DefaultTextStyle(x => x.FontSize(11));
                
                page.Header()
                    .Height(100)
                    .Element(container => Header(container, options));
                
                page.Content()
                    .PaddingVertical(1, Unit.Centimetre)
                    .Column(x =>
                    {
                        x.Spacing(20);
                        
                        if (options.IncludeExecutiveSummary)
                        {
                            x.Item().Element(container => ExecutiveSummary(container, scanResult));
                        }
                        
                        if (options.IncludeSecurityScore)
                        {
                            x.Item().Element(container => SecurityScore(container, scanResult));
                        }
                        
                        if (options.IncludeCharts)
                        {
                            x.Item().Element(container => VulnerabilityCharts(container, scanResult));
                        }
                        
                        if (options.IncludeDetailedFindings)
                        {
                            x.Item().PageBreak();
                            x.Item().Element(container => DetailedFindings(container, scanResult));
                        }
                        
                        if (options.IncludeRemediation)
                        {
                            x.Item().PageBreak();
                            x.Item().Element(container => RemediationSection(container, scanResult));
                        }
                    });
                
                page.Footer()
                    .AlignCenter()
                    .Text(x =>
                    {
                        x.Span("Page ");
                        x.CurrentPageNumber();
                        x.Span(" of ");
                        x.TotalPages();
                        x.Span(" | Generated by VaultScope Enterprise");
                    });
            });
        });
    }
    
    private void Header(IContainer container, ReportOptions options)
    {
        container.Row(row =>
        {
            row.RelativeItem().Column(column =>
            {
                column.Item().Text(options.Title)
                    .FontSize(24)
                    .SemiBold()
                    .FontColor("#8B5CF6");
                
                column.Item().Text($"Generated: {DateTime.Now:yyyy-MM-dd HH:mm:ss}")
                    .FontSize(10)
                    .FontColor(Colors.Grey.Darken2);
                
                if (!string.IsNullOrEmpty(options.CompanyName))
                {
                    column.Item().Text($"Company: {options.CompanyName}")
                        .FontSize(10)
                        .FontColor(Colors.Grey.Darken2);
                }
            });
            
            row.ConstantItem(100).Height(50).Placeholder();
        });
    }
    
    private void ExecutiveSummary(IContainer container, ScanResult scanResult)
    {
        container.Column(column =>
        {
            column.Item().Text("Executive Summary")
                .FontSize(18)
                .SemiBold()
                .FontColor("#8B5CF6");
            
            column.Item().Border(1).BorderColor("#8B5CF6").Padding(10).Column(innerColumn =>
            {
                innerColumn.Spacing(5);
                
                innerColumn.Item().Row(row =>
                {
                    row.RelativeItem().Text("Target URL:").SemiBold();
                    row.ConstantItem(200).Text(scanResult.TargetUrl);
                });
                
                innerColumn.Item().Row(row =>
                {
                    row.RelativeItem().Text("Scan Duration:").SemiBold();
                    row.ConstantItem(200).Text($"{scanResult.Duration.TotalMinutes:F1} minutes");
                });
                
                innerColumn.Item().Row(row =>
                {
                    row.RelativeItem().Text("Endpoints Tested:").SemiBold();
                    row.ConstantItem(200).Text(scanResult.TestedEndpoints.Count.ToString());
                });
                
                innerColumn.Item().Row(row =>
                {
                    row.RelativeItem().Text("Total Vulnerabilities:").SemiBold();
                    row.ConstantItem(200).Text(scanResult.Vulnerabilities.Count.ToString());
                });
                
                innerColumn.Item().PaddingTop(10).Border(1).BorderColor(Colors.Grey.Lighten2);
                
                innerColumn.Item().PaddingTop(10).Text("Severity Breakdown:").SemiBold();
                
                foreach (var severity in Enum.GetValues<VulnerabilitySeverity>().OrderByDescending(s => s))
                {
                    var count = scanResult.Vulnerabilities.Count(v => v.Severity == severity);
                    if (count > 0)
                    {
                        innerColumn.Item().Row(row =>
                        {
                            row.RelativeItem().Text($"  • {severity}:").FontColor(GetSeverityColor(severity));
                            row.ConstantItem(200).Text(count.ToString()).FontColor(GetSeverityColor(severity));
                        });
                    }
                }
                
                var riskLevel = DetermineRiskLevel(scanResult);
                innerColumn.Item().PaddingTop(10).Background(GetRiskColor(riskLevel))
                    .Padding(10).Text($"Overall Risk Level: {riskLevel}")
                    .FontSize(14).SemiBold().FontColor(Colors.White);
            });
        });
    }
    
    private void SecurityScore(IContainer container, ScanResult scanResult)
    {
        if (scanResult.SecurityScore == null) return;
        
        container.Column(column =>
        {
            column.Item().Text("Security Score")
                .FontSize(18)
                .SemiBold()
                .FontColor("#8B5CF6");
            
            column.Item().Row(row =>
            {
                // Overall Score
                row.ConstantItem(150).Border(1).BorderColor("#8B5CF6").Padding(10).Column(col =>
                {
                    col.Item().AlignCenter().Text($"{scanResult.SecurityScore.OverallScore:F0}")
                        .FontSize(48).Bold().FontColor("#8B5CF6");
                    col.Item().AlignCenter().Text(scanResult.SecurityScore.Grade)
                        .FontSize(24).SemiBold();
                });
                
                // Category Scores
                row.RelativeItem().PaddingLeft(20).Column(col =>
                {
                    col.Spacing(5);
                    col.Item().Text("Category Breakdown:").SemiBold();
                    
                    foreach (var category in scanResult.SecurityScore.CategoryScores.Values)
                    {
                        col.Item().Row(catRow =>
                        {
                            catRow.RelativeItem().Text(category.Category);
                            catRow.ConstantItem(100).AlignRight().Text($"{category.Score:F0}%")
                                .FontColor(GetScoreColor(category.Score));
                        });
                        
                        col.Item().Height(10).Background(Colors.Grey.Lighten3)
                            .Layers(layers =>
                            {
                                layers.Layer().Height(10).Width((float)category.Score / 100 * 200)
                                    .Background("#8B5CF6");
                            });
                    }
                });
            });
            
            // Strengths and Weaknesses
            column.Item().PaddingTop(10).Row(row =>
            {
                if (scanResult.SecurityScore.Strengths.Any())
                {
                    row.RelativeItem().Border(1).BorderColor(Colors.Green.Medium)
                        .Background(Colors.Green.Lighten5).Padding(10).Column(col =>
                    {
                        col.Item().Text("Strengths").SemiBold().FontColor(Colors.Green.Darken2);
                        foreach (var strength in scanResult.SecurityScore.Strengths)
                        {
                            col.Item().Text($"• {strength}").FontSize(10);
                        }
                    });
                }
                
                if (scanResult.SecurityScore.Weaknesses.Any())
                {
                    row.RelativeItem().PaddingLeft(10).Border(1).BorderColor(Colors.Red.Medium)
                        .Background(Colors.Red.Lighten5).Padding(10).Column(col =>
                    {
                        col.Item().Text("Weaknesses").SemiBold().FontColor(Colors.Red.Darken2);
                        foreach (var weakness in scanResult.SecurityScore.Weaknesses)
                        {
                            col.Item().Text($"• {weakness}").FontSize(10);
                        }
                    });
                }
            });
        });
    }
    
    private void VulnerabilityCharts(IContainer container, ScanResult scanResult)
    {
        container.Column(column =>
        {
            column.Item().Text("Vulnerability Analysis")
                .FontSize(18)
                .SemiBold()
                .FontColor("#8B5CF6");
            
            // This is a simplified chart representation
            // In a real implementation, you'd generate actual charts
            column.Item().Border(1).BorderColor("#8B5CF6").Padding(10).Row(row =>
            {
                // Severity Distribution
                row.RelativeItem().Column(col =>
                {
                    col.Item().Text("Severity Distribution").SemiBold();
                    col.Item().PaddingTop(10);
                    
                    var total = scanResult.Vulnerabilities.Count;
                    foreach (var severity in Enum.GetValues<VulnerabilitySeverity>().OrderByDescending(s => s))
                    {
                        var count = scanResult.Vulnerabilities.Count(v => v.Severity == severity);
                        if (count > 0)
                        {
                            var percentage = total > 0 ? (double)count / total * 100 : 0;
                            col.Item().Row(r =>
                            {
                                r.ConstantItem(100).Text(severity.ToString()).FontSize(10);
                                r.RelativeItem().Height(20).Background(Colors.Grey.Lighten3)
                                    .Layers(layers =>
                                    {
                                        layers.Layer().Height(20).Width((float)percentage / 100 * 200)
                                            .Background(GetSeverityColor(severity));
                                    });
                                r.ConstantItem(50).AlignRight().Text($"{count}").FontSize(10);
                            });
                        }
                    }
                });
                
                // Type Distribution
                row.RelativeItem().PaddingLeft(20).Column(col =>
                {
                    col.Item().Text("Vulnerability Types").SemiBold();
                    col.Item().PaddingTop(10);
                    
                    var typeGroups = scanResult.Vulnerabilities
                        .GroupBy(v => v.Type)
                        .OrderByDescending(g => g.Count())
                        .Take(5);
                    
                    foreach (var group in typeGroups)
                    {
                        col.Item().Row(r =>
                        {
                            r.RelativeItem().Text(group.Key).FontSize(10);
                            r.ConstantItem(50).AlignRight().Text(group.Count().ToString()).FontSize(10);
                        });
                    }
                });
            });
        });
    }
    
    private void DetailedFindings(IContainer container, ScanResult scanResult)
    {
        container.Column(column =>
        {
            column.Item().Text("Detailed Findings")
                .FontSize(18)
                .SemiBold()
                .FontColor("#8B5CF6");
            
            var groupedVulns = scanResult.Vulnerabilities
                .GroupBy(v => v.Severity)
                .OrderByDescending(g => g.Key);
            
            foreach (var group in groupedVulns)
            {
                column.Item().PaddingTop(10).Text($"{group.Key} Severity Vulnerabilities")
                    .FontSize(14)
                    .SemiBold()
                    .FontColor(GetSeverityColor(group.Key));
                
                foreach (var vuln in group)
                {
                    column.Item().Border(1).BorderColor(GetSeverityColor(vuln.Severity))
                        .Padding(10).Column(vulnCol =>
                    {
                        vulnCol.Item().Row(row =>
                        {
                            row.RelativeItem().Text(vuln.Title).SemiBold();
                            row.ConstantItem(100).Background("#8B5CF6").Padding(5)
                                .Text(vuln.Type).FontSize(9).FontColor(Colors.White);
                        });
                        
                        vulnCol.Item().PaddingTop(5).Text($"Endpoint: {vuln.AffectedEndpoint}")
                            .FontSize(10);
                        vulnCol.Item().Text($"Method: {vuln.HttpMethod}")
                            .FontSize(10);
                        vulnCol.Item().PaddingTop(5).Text(vuln.Description)
                            .FontSize(10);
                        
                        if (!string.IsNullOrEmpty(vuln.Evidence))
                        {
                            vulnCol.Item().PaddingTop(5).Background(Colors.Grey.Lighten4)
                                .Padding(5).Text($"Evidence: {vuln.Evidence}")
                                .FontSize(9).FontFamily(Fonts.CourierNew);
                        }
                        
                        if (!string.IsNullOrEmpty(vuln.Remediation))
                        {
                            vulnCol.Item().PaddingTop(5).Text("Remediation:")
                                .FontSize(10).SemiBold();
                            vulnCol.Item().Text(vuln.Remediation).FontSize(10);
                        }
                        
                        vulnCol.Item().PaddingTop(5).Row(row =>
                        {
                            row.RelativeItem().Text($"CWE: {vuln.CweId}").FontSize(9);
                            row.RelativeItem().Text($"OWASP: {vuln.OwaspCategory}").FontSize(9);
                            row.RelativeItem().Text($"Confidence: {vuln.ConfidenceScore:P0}").FontSize(9);
                        });
                    });
                }
            }
        });
    }
    
    private void RemediationSection(IContainer container, ScanResult scanResult)
    {
        container.Column(column =>
        {
            column.Item().Text("Remediation Recommendations")
                .FontSize(18)
                .SemiBold()
                .FontColor("#8B5CF6");
            
            // Priority Actions
            column.Item().Border(1).BorderColor("#8B5CF6").Padding(10).Column(col =>
            {
                col.Item().Text("Priority Actions").SemiBold();
                col.Item().PaddingTop(5);
                
                var priorityActions = new List<string>();
                
                if (scanResult.Vulnerabilities.Any(v => v.Severity == VulnerabilitySeverity.Critical))
                {
                    priorityActions.Add("1. Address all critical vulnerabilities immediately (within 24-48 hours)");
                }
                
                if (scanResult.Vulnerabilities.Any(v => v.Type.Contains("Injection")))
                {
                    priorityActions.Add("2. Implement comprehensive input validation framework");
                }
                
                if (scanResult.Vulnerabilities.Any(v => v.Type.Contains("Auth")))
                {
                    priorityActions.Add("3. Review and strengthen authentication mechanisms");
                }
                
                priorityActions.Add("4. Conduct thorough security code review");
                priorityActions.Add("5. Implement security headers across all endpoints");
                priorityActions.Add("6. Schedule regular security assessments");
                
                foreach (var action in priorityActions)
                {
                    col.Item().Text($"• {action}").FontSize(10);
                }
            });
            
            // Recommendations by Type
            column.Item().PaddingTop(10).Text("Recommendations by Vulnerability Type")
                .FontSize(14).SemiBold();
            
            var typeGroups = scanResult.Vulnerabilities
                .GroupBy(v => v.Type)
                .OrderByDescending(g => g.Count());
            
            foreach (var group in typeGroups)
            {
                var firstVuln = group.First();
                column.Item().Border(1).BorderColor(Colors.Grey.Medium).Padding(10).Column(col =>
                {
                    col.Item().Row(row =>
                    {
                        row.RelativeItem().Text($"{group.Key}").SemiBold();
                        row.ConstantItem(100).Text($"{group.Count()} instances")
                            .FontSize(10).FontColor(Colors.Grey.Darken2);
                    });
                    
                    if (!string.IsNullOrEmpty(firstVuln.Remediation))
                    {
                        col.Item().PaddingTop(5).Text(firstVuln.Remediation).FontSize(10);
                    }
                });
            }
        });
    }
    
    private string GetSeverityColor(VulnerabilitySeverity severity)
    {
        return severity switch
        {
            VulnerabilitySeverity.Critical => Colors.Red.Darken2,
            VulnerabilitySeverity.High => Colors.Orange.Darken2,
            VulnerabilitySeverity.Medium => Colors.Yellow.Darken3,
            VulnerabilitySeverity.Low => Colors.Blue.Medium,
            VulnerabilitySeverity.Informational => Colors.Grey.Medium,
            _ => Colors.Grey.Medium
        };
    }
    
    private string GetRiskColor(string riskLevel)
    {
        return riskLevel switch
        {
            "CRITICAL" => Colors.Red.Darken2,
            "HIGH" => Colors.Orange.Darken2,
            "MEDIUM" => Colors.Yellow.Darken3,
            "LOW" => Colors.Blue.Medium,
            _ => Colors.Grey.Medium
        };
    }
    
    private string GetScoreColor(double score)
    {
        return score switch
        {
            >= 90 => Colors.Green.Darken2,
            >= 70 => Colors.Yellow.Darken3,
            >= 50 => Colors.Orange.Darken2,
            _ => Colors.Red.Darken2
        };
    }
    
    private string DetermineRiskLevel(ScanResult scanResult)
    {
        if (scanResult.Vulnerabilities.Any(v => v.Severity == VulnerabilitySeverity.Critical))
            return "CRITICAL";
        
        if (scanResult.Vulnerabilities.Count(v => v.Severity == VulnerabilitySeverity.High) >= 3)
            return "HIGH";
        
        if (scanResult.Vulnerabilities.Any(v => v.Severity == VulnerabilitySeverity.High))
            return "MEDIUM";
        
        if (scanResult.Vulnerabilities.Any())
            return "LOW";
        
        return "MINIMAL";
    }
}